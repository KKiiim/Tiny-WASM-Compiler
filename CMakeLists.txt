
cmake_minimum_required(VERSION 3.15)
project(tiny-wasm-compiler)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

file(GLOB COMPILER_SRC_FILES 
    ${CMAKE_CURRENT_LIST_DIR}/src/**/*.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/*.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/*.hpp
)

set(WASM_COMPILER_INCLUDE_ROOT ${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${WASM_COMPILER_INCLUDE_ROOT})

# set(CMAKE_CXX_CLANG_TIDY clang-tidy --config-file ${CMAKE_CURRENT_LIST_DIR}/.clang-tidy "--header-filter=${CMAKE_CURRENT_LIST_DIR}/(src|tests)/.*")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug)
endif()

if(ENABLE_DEMO)
	add_subdirectory(demo)
endif()

if(ENABLE_TEST)
	add_subdirectory(tests)
endif()

set(CAPSTONE_ARM64_SUPPORT ON CACHE BOOL "Enable ARM64 support")
foreach(option CAPSTONE_ARM_SUPPORT CAPSTONE_M68K_SUPPORT CAPSTONE_MIPS_SUPPORT CAPSTONE_PPC_SUPPORT CAPSTONE_SPARC_SUPPORT CAPSTONE_SYSZ_SUPPORT CAPSTONE_XCORE_SUPPORT CAPSTONE_X86_SUPPORT CAPSTONE_TMS320C64X_SUPPORT CAPSTONE_M680X_SUPPORT CAPSTONE_EVM_SUPPORT CAPSTONE_MOS65XX_SUPPORT CAPSTONE_WASM_SUPPORT CAPSTONE_BPF_SUPPORT CAPSTONE_RISCV_SUPPORT CAPSTONE_SH_SUPPORT CAPSTONE_TRICORE_SUPPORT)
    set(${option} OFF CACHE BOOL "Disable ${option}")
endforeach()

add_subdirectory(third_party/capstone)